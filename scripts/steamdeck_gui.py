#!/usr/bin/env python3
"""
Steam Deck Enhancement Pack GUI
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏ Steam Deck
–ê–≤—Ç–æ—Ä: @ncux11
–í–µ—Ä—Å–∏—è: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è (—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ VERSION)
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext, simpledialog
import subprocess
import threading
import os
import sys
import time
import queue
import getpass
from pathlib import Path
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import sys
# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é scripts –≤ Python path
scripts_dir = Path(__file__).parent
if str(scripts_dir) not in sys.path:
    sys.path.insert(0, str(scripts_dir))

try:
    from steamdeck_logger import SteamDeckLogger  # type: ignore
except ImportError:
    # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class SteamDeckLogger:
        def log_operation(self, operation, status, details=""): pass
        def log_success(self, operation, details=""): pass
        def log_error(self, operation, details=""): pass
        def log_warning(self, operation, details=""): pass
        def log_info(self, operation, details=""): pass
        def get_log_path(self): return ""


# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Steam Deck Enhancement Pack
class SteamDeckError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Steam Deck Enhancement Pack"""
    pass


class ScriptNotFoundError(SteamDeckError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    def __init__(self, script_name):
        self.script_name = script_name
        super().__init__(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_name}")


class DependencyError(SteamDeckError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"""
    def __init__(self, dependency):
        self.dependency = dependency
        super().__init__(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {dependency}")


class SteamDeckPermissionError(SteamDeckError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
    def __init__(self, operation):
        self.operation = operation
        super().__init__(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}")


class ConfigurationError(SteamDeckError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    def __init__(self, config_file):
        self.config_file = config_file
        super().__init__(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")

class SteamDeckGUI:
    def __init__(self, root):
        print("DEBUG: SteamDeckGUI.__init__ start")
        self.root = root
        print("DEBUG: Root created")
        self.root.title("Steam Deck Enhancement Pack")
        print("DEBUG: Title set")
        self.root.geometry("800x600")
        print("DEBUG: Geometry set")
        self.root.configure(bg='#2b2b2b')
        print("DEBUG: Background configured")
        
        # –°—Ç–∏–ª–∏
        print("DEBUG: Creating style...")
        self.style = ttk.Style()
        print("DEBUG: Style object created")
        self.style.theme_use('clam')
        print("DEBUG: Theme set")
        self.style.configure('TNotebook', background='#2b2b2b')
        self.style.configure('TNotebook.Tab', background='#3c3c3c', foreground='white')
        self.style.configure('TFrame', background='#2b2b2b')
        self.style.configure('TLabel', background='#2b2b2b', foreground='white')
        self.style.configure('TButton', background='#4a4a4a', foreground='white')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.scripts_dir = Path(__file__).parent
        self.project_root = Path(__file__).parent.parent
        self.output_text = None
        self.running_process = None
        self.progress_queue = queue.Queue()
        self.progress_bar = None
        self.progress_label = None
        self.sudo_password = None
        self.sudo_authenticated = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self.logger = SteamDeckLogger()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION
        self.version = self.get_version()
        
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.root.after(100, self.process_progress_queue)
    
    def get_version(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
        try:
            version_file = self.project_root / "VERSION"
            if version_file.exists():
                with open(version_file, 'r') as f:
                    return f.read().strip()
            else:
                return "0.1.3"  # Fallback –≤–µ—Ä—Å–∏—è
        except:
            return "0.1.3"  # Fallback –≤–µ—Ä—Å–∏—è
    
    def refresh_version(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ GUI"""
        old_version = self.version
        self.version = self.get_version()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.root.title(f"Steam Deck Enhancement Pack v{self.version}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
        if old_version != self.version:
            self.append_output(f"üîÑ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {old_version} ‚Üí {self.version}")
        else:
            self.append_output(f"‚ÑπÔ∏è –í–µ—Ä—Å–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è: {self.version}")
        
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.create_menu()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–∏—Å—Ç–µ–º–∞"
        self.create_system_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ò–≥—Ä—ã"
        self.create_games_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        self.create_optimization_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–£—Ç–∏–ª–∏—Ç—ã"
        self.create_utilities_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "Offline"
        self.create_offline_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–±–ª–æ–∂–∫–∏"
        self.create_artwork_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        self.create_logs_tab(notebook)
        
    def create_menu(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ü–æ–º–æ—â—å
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        help_menu.add_command(label="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", command=self.open_documentation)
        
    def create_system_tab(self, notebook):
        # –í–∫–ª–∞–¥–∫–∞ "–°–∏—Å—Ç–µ–º–∞"
        system_frame = ttk.Frame(notebook)
        notebook.add(system_frame, text="–°–∏—Å—Ç–µ–º–∞")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(system_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π Steam Deck", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        buttons_frame = ttk.Frame(system_frame)
        buttons_frame.pack(pady=20)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        row1 = ttk.Frame(buttons_frame)
        row1.pack(pady=5)
        
        ttk.Button(row1, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 
                  command=self.run_system_setup,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", 
                  command=self.run_backup,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 
                  command=self.run_cleanup,
                  width=20).pack(side='left', padx=5)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        row2 = ttk.Frame(buttons_frame)
        row2.pack(pady=5)
        
        ttk.Button(row2, text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
                  command=lambda: self.run_script("steamdeck_monitor.sh", "all"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", 
                  command=lambda: self.run_script("steamdeck_setup.sh", "status"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–°–±—Ä–æ—Å sudo", 
                  command=self.reset_sudo_auth,
                  width=20).pack(side='left', padx=5)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        row3 = ttk.Frame(buttons_frame)
        row3.pack(pady=5)
        
        ttk.Button(row3, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                  command=self.check_updates,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–û–±–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É", 
                  command=self.update_utility,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–û—Ç–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                  command=self.rollback_update,
                  width=20).pack(side='left', padx=5)
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        row4 = ttk.Frame(buttons_frame)
        row4.pack(pady=5)
        
        ttk.Button(row4, text="MicroSD", 
                  command=self.open_microsd_menu,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row4, text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø", 
                  command=self.restore_backup,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row4, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É", 
                  command=self.install_steamdeck_utils,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row4, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", 
                  command=self.configure_settings,
                  width=20).pack(side='left', padx=5)
        
        # –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ - –ª–æ–≥–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        row5 = ttk.Frame(buttons_frame)
        row5.pack(pady=5)
        
        ttk.Button(row5, text="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", 
                  command=self.export_logs,
                  width=20).pack(side='left', padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ttk.LabelFrame(system_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        info_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.system_info = scrolledtext.ScrolledText(info_frame, height=10, 
                                                   bg='#1e1e1e', fg='white')
        self.system_info.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        self.load_system_info()
        
    def create_games_tab(self, notebook):
        # –í–∫–ª–∞–¥–∫–∞ "–ò–≥—Ä—ã"
        games_frame = ttk.Frame(notebook)
        notebook.add(games_frame, text="–ò–≥—Ä—ã")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(games_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –∏–≥—Ä
        buttons_frame = ttk.Frame(games_frame)
        buttons_frame.pack(pady=20)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        row1 = ttk.Frame(buttons_frame)
        row1.pack(pady=5)
        
        ttk.Button(row1, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                  command=lambda: self.run_script("steamdeck_install_apps.sh", "interactive"),
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", 
                  command=lambda: self.run_script("steamdeck_install_apps.sh", "quick"),
                  width=25).pack(side='left', padx=5)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —è—Ä–ª—ã–∫–∏
        row2 = ttk.Frame(buttons_frame)
        row2.pack(pady=5)
        
        ttk.Button(row2, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–ª—ã–∫–∞–º–∏", 
                  command=lambda: self.run_script("steamdeck_shortcuts.sh", "interactive"),
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–î–æ–±–∞–≤–∏—Ç—å –≤ Steam", 
                  command=self.add_to_steam_dialog,
                  width=25).pack(side='left', padx=5)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - Native Linux –∏–≥—Ä—ã
        row3 = ttk.Frame(buttons_frame)
        row3.pack(pady=5)
        
        ttk.Button(row3, text="–ù–∞–π—Ç–∏ .sh –∏–≥—Ä—ã", 
                  command=lambda: self.run_script("steamdeck_native_games.sh", "find"),
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–î–æ–±–∞–≤–∏—Ç—å .sh –∏–≥—Ä—ã", 
                  command=lambda: self.run_script("steamdeck_native_games.sh", "batch"),
                  width=25).pack(side='left', padx=5)
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç–º—É–ª—è—Ç–æ—Ä—ã –∏ –ª–∞—É–Ω—á–µ—Ä—ã
        row4 = ttk.Frame(buttons_frame)
        row4.pack(pady=5)
        
        ttk.Button(row4, text="–≠–º—É–ª—è—Ç–æ—Ä—ã", 
                  command=lambda: self.run_script("steamdeck_shortcuts.sh", "emulators"),
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row4, text="–õ–∞—É–Ω—á–µ—Ä—ã", 
                  command=lambda: self.run_script("steamdeck_shortcuts.sh", "launchers"),
                  width=25).pack(side='left', padx=5)
        
        # –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        row5 = ttk.Frame(buttons_frame)
        row5.pack(pady=5)
        
        ttk.Button(row5, text="–ó–∞–ø—É—Å–∫ —Å Sniper", 
                  command=self.run_game_with_sniper,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row5, text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã", 
                  command=self.diagnose_game,
                  width=25).pack(side='left', padx=5)
        
        # –®–µ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - SteamRip
        row6 = ttk.Frame(buttons_frame)
        row6.pack(pady=5)
        
        ttk.Button(row6, text="SteamRip RAR", 
                  command=self.run_steamrip_handler,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row6, text="–ù–∞–π—Ç–∏ RAR —Ñ–∞–π–ª—ã", 
                  command=self.find_steamrip_rar,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row6, text="–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
                  command=self.batch_process_steamrip,
                  width=25).pack(side='left', padx=5)
        
        # –°–µ–¥—å–º–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ SteamRip
        row7 = ttk.Frame(buttons_frame)
        row7.pack(pady=5)
        
        ttk.Button(row7, text="–ê–Ω–∞–ª–∏–∑ RAR —Ñ–∞–π–ª–∞", 
                  command=self.analyze_steamrip_rar,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row7, text="–†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å RAR", 
                  command=self.extract_steamrip_rar,
                  width=25).pack(side='left', padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–∞—Ö
        info_frame = ttk.LabelFrame(games_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–∞—Ö")
        info_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.games_info = scrolledtext.ScrolledText(info_frame, height=8, 
                                                  bg='#1e1e1e', fg='white')
        self.games_info.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–∞—Ö
        self.load_games_info()
        
    def create_optimization_tab(self, notebook):
        # –í–∫–ª–∞–¥–∫–∞ "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        opt_frame = ttk.Frame(notebook)
        notebook.add(opt_frame, text="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(opt_frame, text="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        profiles_frame = ttk.LabelFrame(opt_frame, text="–ü—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        profiles_frame.pack(fill='x', padx=10, pady=10)
        
        profiles_buttons = ttk.Frame(profiles_frame)
        profiles_buttons.pack(pady=10)
        
        ttk.Button(profiles_buttons, text="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "performance"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(profiles_buttons, text="–ë–∞–ª–∞–Ω—Å", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "profile BALANCED"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(profiles_buttons, text="–≠–∫–æ–Ω–æ–º–∏—è –±–∞—Ç–∞—Ä–µ–∏", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "battery"),
                  width=20).pack(side='left', padx=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TDP
        tdp_frame = ttk.LabelFrame(opt_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ TDP")
        tdp_frame.pack(fill='x', padx=10, pady=10)
        
        tdp_buttons = ttk.Frame(tdp_frame)
        tdp_buttons.pack(pady=10)
        
        ttk.Button(tdp_buttons, text="3W (–ú–∞–∫—Å. –±–∞—Ç–∞—Ä–µ—è)", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "profile BATTERY_SAVER"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(tdp_buttons, text="10W (–ë–∞–ª–∞–Ω—Å)", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "profile BALANCED"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(tdp_buttons, text="15W (–ú–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "profile PERFORMANCE"),
                  width=20).pack(side='left', padx=5)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä
        games_opt_frame = ttk.LabelFrame(opt_frame, text="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä")
        games_opt_frame.pack(fill='x', padx=10, pady=10)
        
        games_opt_buttons = ttk.Frame(games_opt_frame)
        games_opt_buttons.pack(pady=10)
        
        ttk.Button(games_opt_buttons, text="Cyberpunk 2077", 
                  command=lambda: self.run_script("steamdeck_optimizer.sh", "game cyberpunk"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(games_opt_buttons, text="Elden Ring", 
                  command=lambda: self.run_script("steamdeck_optimizer.sh", "game elden"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(games_opt_buttons, text="–ò–Ω–¥–∏-–∏–≥—Ä—ã", 
                  command=lambda: self.run_script("steamdeck_optimizer.sh", "game indie"),
                  width=20).pack(side='left', padx=5)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_frame = ttk.LabelFrame(opt_frame, text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        monitor_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        monitor_buttons = ttk.Frame(monitor_frame)
        monitor_buttons.pack(pady=10)
        
        ttk.Button(monitor_buttons, text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", 
                  command=lambda: self.run_script("steamdeck_optimizer.sh", "status"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(monitor_buttons, text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", 
                  command=lambda: self.run_script("steamdeck_monitor.sh", "realtime 2"),
                  width=30).pack(side='left', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        self.opt_output = scrolledtext.ScrolledText(monitor_frame, height=8, 
                                                  bg='#1e1e1e', fg='white')
        self.opt_output.pack(fill='both', expand=True, padx=5, pady=5)
        
    def create_utilities_tab(self, notebook):
        # –í–∫–ª–∞–¥–∫–∞ "–£—Ç–∏–ª–∏—Ç—ã"
        utils_frame = ttk.Frame(notebook)
        notebook.add(utils_frame, text="–£—Ç–∏–ª–∏—Ç—ã")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(utils_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É—Ç–∏–ª–∏—Ç
        buttons_frame = ttk.Frame(utils_frame)
        buttons_frame.pack(pady=20)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        row1 = ttk.Frame(buttons_frame)
        row1.pack(pady=5)
        
        ttk.Button(row1, text="–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞", 
                  command=lambda: self.run_script("steamdeck_cleanup.sh", "safe"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", 
                  command=lambda: self.run_script("steamdeck_cleanup.sh", "full"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–û—á–∏—Å—Ç–∫–∞ Steam", 
                  command=lambda: self.run_script("steamdeck_cleanup.sh", "steam"),
                  width=20).pack(side='left', padx=5)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        row2 = ttk.Frame(buttons_frame)
        row2.pack(pady=5)
        
        ttk.Button(row2, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–∫–∞", 
                  command=lambda: self.run_script("steamdeck_cleanup.sh", "disk"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", 
                  command=lambda: self.run_script("steamdeck_cleanup.sh", "duplicates"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", 
                  command=lambda: self.run_script("steamdeck_backup.sh", "backup"),
                  width=20).pack(side='left', padx=5)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
        row3 = ttk.Frame(buttons_frame)
        row3.pack(pady=5)
        
        ttk.Button(row3, text="–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", 
                  command=lambda: self.run_script("steamdeck_backup.sh", "list"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "setup"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                  command=lambda: self.run_script_with_sudo("steamdeck_optimizer.sh", "reset"),
                  width=20).pack(side='left', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = ttk.LabelFrame(utils_frame, text="–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥")
        output_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_frame = ttk.Frame(output_frame)
        progress_frame.pack(fill='x', padx=5, pady=5)
        
        self.progress_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_label.pack(side='left')
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='indeterminate')
        self.progress_bar.pack(side='right', fill='x', expand=True, padx=(10, 0))
        
        self.utils_output = scrolledtext.ScrolledText(output_frame, height=10, 
                                                    bg='#1e1e1e', fg='white')
        self.utils_output.pack(fill='both', expand=True, padx=5, pady=5)
        
    def create_offline_tab(self, notebook):
        # –í–∫–ª–∞–¥–∫–∞ "Offline"
        offline_frame = ttk.Frame(notebook)
        notebook.add(offline_frame, text="Offline")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(offline_frame, text="Offline-—Ä–µ–∂–∏–º –∏ —Ç—Ä—é–∫–∏", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ offline-—Ä–µ–∂–∏–º–∞
        buttons_frame = ttk.Frame(offline_frame)
        buttons_frame.pack(pady=20)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ offline
        row1 = ttk.Frame(buttons_frame)
        row1.pack(pady=5)
        
        ttk.Button(row1, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Offline", 
                  command=lambda: self.run_script("steamdeck_offline_setup.sh", "setup"),
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row1, text="Offline –ú–µ–Ω—é", 
                  command=self.run_offline_menu,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–ó–∞–ø—É—Å–∫ Steam Offline", 
                  command=self.run_steam_offline,
                  width=25).pack(side='left', padx=5)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        row2 = ttk.Frame(buttons_frame)
        row2.pack(pady=5)
        
        ttk.Button(row2, text="–ú–∞–∫—Å. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
                  command=self.run_max_performance,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–ë–∞–ª–∞–Ω—Å", 
                  command=self.run_balanced_profile,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–≠–∫–æ–Ω–æ–º–∏—è –ë–∞—Ç–∞—Ä–µ–∏", 
                  command=self.run_battery_saver,
                  width=25).pack(side='left', padx=5)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - —É—Ç–∏–ª–∏—Ç—ã offline
        row3 = ttk.Frame(buttons_frame)
        row3.pack(pady=5)
        
        ttk.Button(row3, text="–û—á–∏—Å—Ç–∫–∞ –ü–∞–º—è—Ç–∏", 
                  command=self.run_free_memory,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–ë—ç–∫–∞–ø –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π", 
                  command=self.run_backup_saves,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–µ–¥–∏–∞", 
                  command=self.run_media_manager,
                  width=25).pack(side='left', padx=5)
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç–º—É–ª—è—Ü–∏—è –∏ ROM-—ã
        row4 = ttk.Frame(buttons_frame)
        row4.pack(pady=5)
        
        ttk.Button(row4, text="RetroArch", 
                  command=self.run_retroarch,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row4, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ROM-–∞–º–∏", 
                  command=self.run_roms_manager,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row4, text="VLC –ú–µ–¥–∏–∞-–ø–ª–µ–µ—Ä", 
                  command=self.run_vlc,
                  width=25).pack(side='left', padx=5)
        
        # –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä—é–∫–∏
        row5 = ttk.Frame(buttons_frame)
        row5.pack(pady=5)
        
        ttk.Button(row5, text="–û—Ç–∫–ª—é—á–∏—Ç—å Wi-Fi", 
                  command=self.disable_wifi,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row5, text="–í–∫–ª—é—á–∏—Ç—å Wi-Fi", 
                  command=self.enable_wifi,
                  width=25).pack(side='left', padx=5)
        
        ttk.Button(row5, text="–ê–≤—Ç–æ-–ü—Ä–æ—Ñ–∏–ª—å", 
                  command=self.run_auto_profile,
                  width=25).pack(side='left', padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ offline-—Ä–µ–∂–∏–º–µ
        info_frame = ttk.LabelFrame(offline_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Offline-—Ä–µ–∂–∏–º–µ")
        info_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.offline_info = scrolledtext.ScrolledText(info_frame, height=8, 
                                                    bg='#1e1e1e', fg='white')
        self.offline_info.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ offline-—Ä–µ–∂–∏–º–µ
        self.load_offline_info()
        
    def create_logs_tab(self, notebook):
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        logs_frame = ttk.Frame(notebook)
        notebook.add(logs_frame, text="–õ–æ–≥–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(logs_frame, text="–õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –ª–æ–≥–æ–≤
        buttons_frame = ttk.Frame(logs_frame)
        buttons_frame.pack(pady=10)
        
        ttk.Button(buttons_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.refresh_logs,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs,
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.save_logs,
                  width=20).pack(side='left', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.logs_text = scrolledtext.ScrolledText(logs_frame, height=20, 
                                                  bg='#1e1e1e', fg='white')
        self.logs_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        self.refresh_logs()
        
    def run_script(self, script_name, args=""):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run():
            try:
                script_path = self.scripts_dir / script_name
                if not script_path.exists():
                    self.append_output(f"–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
                os.chmod(script_path, 0o755)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
                if args:
                    cmd = [str(script_path), args]
                else:
                    cmd = [str(script_path)]
                
                self.append_output(f"–ó–∞–ø—É—Å–∫: {' '.join(cmd)}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                long_operations = [
                    "steamdeck_setup.sh setup",
                    "steamdeck_steamrip.sh extract",
                    "steamdeck_steamrip.sh batch",
                    "steamdeck_install_apps.sh quick",
                    "steamdeck_cleanup.sh full",
                    "steamdeck_backup.sh backup"
                ]
                
                operation_key = f"{script_name} {args}".strip()
                show_progress = any(op in operation_key for op in long_operations)
                
                if show_progress:
                    self.progress_queue.put("SHOW_PROGRESS")
                    self.progress_queue.put(f"UPDATE:–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {script_name}...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )
                
                self.running_process = process
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                for line in iter(process.stdout.readline, ''):
                    if line:
                        self.append_output(line.rstrip())
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        if show_progress and "—É—Å—Ç–∞–Ω–æ–≤–∫–∞" in line.lower():
                            self.progress_queue.put(f"UPDATE:–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
                        elif show_progress and "—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞" in line.lower():
                            self.progress_queue.put(f"UPDATE:–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤...")
                        elif show_progress and "–æ—á–∏—Å—Ç–∫–∞" in line.lower():
                            self.progress_queue.put(f"UPDATE:–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
                
                process.wait()
                self.append_output(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: {process.returncode}")
                
                if show_progress:
                    self.progress_queue.put("HIDE_PROGRESS")
                
            except Exception as e:
                self.append_output(f"–û—à–∏–±–∫–∞: {str(e)}")
                if show_progress:
                    self.progress_queue.put("HIDE_PROGRESS")
            finally:
                self.running_process = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run)
        thread.daemon = True
        thread.start()
        
    def append_output(self, text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞"""
        def update():
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            for widget in [self.system_info, self.games_info, self.opt_output, 
                          self.utils_output, self.logs_text]:
                if widget.winfo_exists():
                    widget.insert(tk.END, text + "\n")
                    widget.see(tk.END)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.root.after(0, update)
    
    def show_progress(self, message="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è..."):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if self.progress_bar and self.progress_label:
            self.progress_label.config(text=message)
            self.progress_bar.start(10)
    
    def hide_progress(self, message="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"):
        """–°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if self.progress_bar and self.progress_label:
            self.progress_bar.stop()
            self.progress_label.config(text=message)
    
    def update_progress(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress_label:
            self.progress_label.config(text=message)
    
    def process_progress_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            while True:
                message = self.progress_queue.get_nowait()
                if message == "SHOW_PROGRESS":
                    self.show_progress()
                elif message == "HIDE_PROGRESS":
                    self.hide_progress()
                elif message.startswith("UPDATE:"):
                    self.update_progress(message[7:])
        except queue.Empty:
            pass
        finally:
            self.root.after(100, self.process_progress_queue)
    
    def request_sudo_password(self):
        """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è sudo —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.sudo_authenticated and self.sudo_password:
            return True
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        password = simpledialog.askstring(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å sudo",
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
            show='*'
        )
        
        if not password:
            self.append_output("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if self.verify_sudo_password(password):
            self.sudo_password = password
            self.sudo_authenticated = True
            self.append_output("‚úÖ –ü–∞—Ä–æ–ª—å sudo –ø—Ä–∏–Ω—è—Ç")
            return True
        else:
            self.append_output("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å sudo")
            return False
    
    def verify_sudo_password(self, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è sudo"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
            process = subprocess.Popen(
                ['sudo', '-S', 'echo', 'test'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate(input=password + '\n')
            return process.returncode == 0
        except Exception as e:
            self.append_output(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
            return False
    
    def run_script_with_sudo(self, script_name, args=""):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å sudo"""
        if not self.request_sudo_password():
            return
            
        def run():
            try:
                script_path = self.scripts_dir / script_name
                if not script_path.exists():
                    self.append_output(f"–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
                os.chmod(script_path, 0o755)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å sudo
                if args:
                    cmd = ['sudo', '-S', str(script_path), args]
                else:
                    cmd = ['sudo', '-S', str(script_path)]
                
                self.append_output(f"–ó–∞–ø—É—Å–∫ —Å sudo: {' '.join(cmd)}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )
                
                self.running_process = process
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ stdin
                process.stdin.write(self.sudo_password + '\n')
                process.stdin.flush()
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                for line in iter(process.stdout.readline, ''):
                    if line:
                        self.append_output(line.rstrip())
                
                process.wait()
                self.append_output(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: {process.returncode}")
                
            except Exception as e:
                self.append_output(f"–û—à–∏–±–∫–∞: {str(e)}")
            finally:
                self.running_process = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run)
        thread.daemon = True
        thread.start()
    
    def reset_sudo_auth(self):
        """–°–±—Ä–æ—Å sudo –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.sudo_password = None
        self.sudo_authenticated = False
        self.append_output("üîê Sudo –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def open_microsd_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è MicroSD"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ MicroSD
        dialog = tk.Toplevel(self.root)
        dialog.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MicroSD")
        dialog.geometry("500x400")
        dialog.configure(bg='#2b2b2b')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(dialog, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MicroSD –∫–∞—Ä—Ç–∞–º–∏", 
                 font=('Arial', 12, 'bold')).pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.pack(pady=10)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        row1 = ttk.Frame(buttons_frame)
        row1.pack(pady=5)
        
        ttk.Button(row1, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—ã", 
                  command=lambda: self.run_script("steamdeck_microsd.sh", "check"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row1, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", 
                  command=lambda: self.run_script("steamdeck_microsd.sh", "mount-info"),
                  width=20).pack(side='left', padx=5)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        row2 = ttk.Frame(buttons_frame)
        row2.pack(pady=5)
        
        ttk.Button(row2, text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ UI", 
                  command=lambda: self.run_script("steamdeck_microsd.sh", "diagnose"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row2, text="–û–±–Ω–æ–≤–∏—Ç—å UI", 
                  command=lambda: self.run_script_with_sudo("steamdeck_microsd.sh", "refresh"),
                  width=20).pack(side='left', padx=5)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
        row3 = ttk.Frame(buttons_frame)
        row3.pack(pady=5)
        
        ttk.Button(row3, text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã", 
                  command=lambda: self.run_script_with_sudo("steamdeck_microsd.sh", "fix"),
                  width=20).pack(side='left', padx=5)
        
        ttk.Button(row3, text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å", 
                  command=lambda: self.run_script_with_sudo("steamdeck_microsd.sh", "safely-remove"),
                  width=20).pack(side='left', padx=5)
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        row4 = ttk.Frame(buttons_frame)
        row4.pack(pady=5)
        
        ttk.Button(row4, text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                  command=lambda: self.run_script("steamdeck_microsd.sh", "test"),
                  width=20).pack(side='left', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = ttk.LabelFrame(dialog, text="–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥")
        output_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        microsd_output = scrolledtext.ScrolledText(output_frame, height=10, 
                                                  bg='#1e1e1e', fg='white')
        microsd_output.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(dialog, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy).pack(pady=10)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        dialog.microsd_output = microsd_output
        
    def load_system_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            import platform
            import psutil
            
            info = f"–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}\n"
            info += f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}\n"
            info += f"–ü–∞–º—è—Ç—å: {psutil.virtual_memory().total // (1024**3)} GB\n"
            info += f"–î–∏—Å–∫: {psutil.disk_usage('/').total // (1024**3)} GB\n"
            
            self.system_info.insert(tk.END, info)
            
        except ImportError:
            self.system_info.insert(tk.END, "psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil")
        except Exception as e:
            self.system_info.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            
    def load_games_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–∞—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Flatpak –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            result = subprocess.run(['flatpak', 'list', '--app'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                apps = result.stdout.strip().split('\n')
                self.games_info.insert(tk.END, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Flatpak –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(apps)}\n")
            else:
                self.games_info.insert(tk.END, "Flatpak –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n")
                
        except Exception as e:
            self.games_info.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–∞—Ö: {e}")
            
    def restore_backup(self):
        """–î–∏–∞–ª–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
            filetypes=[("Tar archives", "*.tar.gz"), ("All files", "*.*")]
        )
        
        if file_path:
            self.run_script("steamdeck_backup.sh", f"restore {file_path}")
    
    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—Ç–∏–ª–∏—Ç—ã"""
        import subprocess
        import threading
        
        def check_updates_thread():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                script_path = self.scripts_dir / "steamdeck_update.sh"
                result = subprocess.run(
                    ["bash", str(script_path), "check"],
                    capture_output=True,
                    text=True,
                    cwd=str(self.project_root)
                )
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                self.root.after(0, lambda: self.show_update_result(result))
                
            except Exception as e:
                self.root.after(0, lambda: self.show_update_error(str(e)))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=check_updates_thread)
        thread.daemon = True
        thread.start()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.show_progress("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    
    def show_update_result(self, result, operation="check"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
        self.hide_progress()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        if operation == "check":
            title = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        elif operation == "update":
            title = "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ç–∏–ª–∏—Ç—ã"
        elif operation == "rollback":
            title = "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        else:
            title = "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"
        
        dialog = tk.Toplevel(self.root)
        dialog.title(title)
        dialog.geometry("700x500")
        dialog.configure(bg='#2b2b2b')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = f"{title} - Steam Deck Enhancement Pack"
        title_label = tk.Label(dialog, text=title_text, 
                              font=('Arial', 14, 'bold'), fg='white', bg='#2b2b2b')
        title_label.pack(pady=10)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = tk.Frame(dialog, bg='#2b2b2b')
        output_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        text_widget = scrolledtext.ScrolledText(output_frame, height=15, width=70, 
                                               bg='#1e1e1e', fg='white', 
                                               font=('Consolas', 10))
        text_widget.pack(fill='both', expand=True)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text_widget.insert(tk.END, "=== –í–´–í–û–î –°–ö–†–ò–ü–¢–ê ===\n")
        text_widget.insert(tk.END, f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}\n\n")
        
        if result.stdout:
            text_widget.insert(tk.END, "STDOUT:\n")
            text_widget.insert(tk.END, result.stdout)
            text_widget.insert(tk.END, "\n")
        
        if result.stderr:
            text_widget.insert(tk.END, "\nSTDERR:\n")
            text_widget.insert(tk.END, result.stderr)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text_widget.insert(tk.END, "\n=== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===\n")
        
        if result.returncode == 0:
            if operation == "check":
                if "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" in result.stdout:
                    text_widget.insert(tk.END, "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\n")
                    text_widget.insert(tk.END, "–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n")
                elif "–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è" in result.stdout:
                    text_widget.insert(tk.END, "‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.\n")
                else:
                    text_widget.insert(tk.END, "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")
            elif operation == "update":
                if "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" in result.stdout or "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in result.stdout:
                    text_widget.insert(tk.END, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n")
                    text_widget.insert(tk.END, "–£—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.\n")
                else:
                    text_widget.insert(tk.END, "‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n")
            elif operation == "rollback":
                if "–û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω" in result.stdout or "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in result.stdout:
                    text_widget.insert(tk.END, "‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
                    text_widget.insert(tk.END, "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                else:
                    text_widget.insert(tk.END, "‚ÑπÔ∏è –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n")
            else:
                text_widget.insert(tk.END, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n")
        else:
            if operation == "check":
                text_widget.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.\n")
                text_widget.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.\n")
            elif operation == "update":
                text_widget.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n")
                text_widget.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.\n")
            elif operation == "rollback":
                text_widget.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ.\n")
                text_widget.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.\n")
            else:
                text_widget.insert(tk.END, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.\n")
        
        text_widget.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(dialog, bg='#2b2b2b')
        button_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if operation == "check" and result.returncode == 0 and "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" in result.stdout:
            tk.Button(button_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", 
                     command=lambda: [dialog.destroy(), self.update_utility()],
                     bg='#4CAF50', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        elif operation == "update" and result.returncode == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            update_successful = ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" in result.stdout or 
                               "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in result.stdout or
                               "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" in result.stdout)
            
            if update_successful:
                tk.Button(button_frame, text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å GUI", 
                         command=lambda: [dialog.destroy(), self.restart_gui_now()],
                         bg='#4CAF50', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
            
            tk.Button(button_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                     command=lambda: [dialog.destroy(), self.check_updates()],
                     bg='#2196F3', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        elif operation == "rollback" and result.returncode == 0:
            tk.Button(button_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                     command=lambda: [dialog.destroy(), self.check_updates()],
                     bg='#2196F3', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        
        tk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                 command=dialog.destroy,
                 bg='#666666', fg='white').pack(side='left', padx=5)
    
    def show_update_error(self, error_msg):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.hide_progress()
        messagebox.showerror("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", 
                           f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n{error_msg}")
    
    def restart_gui_now(self):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ GUI –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
            script_path = self.scripts_dir / "steamdeck_gui.py"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not script_path.exists():
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–∫—Ä–∏–ø—Ç GUI –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            restart_script = self.project_root / "restart_gui.sh"
            restart_script_content = f"""#!/bin/bash
# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ GUI
cd "{self.project_root}"
python3 "{script_path}" &
# –£–¥–∞–ª—è–µ–º —Å–µ–±—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
rm -f "{restart_script}"
"""
            
            with open(restart_script, 'w') as f:
                f.write(restart_script_content)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(restart_script, 0o755)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            import subprocess
            subprocess.Popen([str(restart_script)], 
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL,
                           stdin=subprocess.DEVNULL)
            
            self.append_output("‚úÖ GUI –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(2)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
            self.root.quit()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ GUI: {e}")
            self.append_output(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    def restart_gui(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ GUI –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        result = messagebox.askyesno(
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ GUI",
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å GUI –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π?\n\n"
            "–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –∏ –∑–∞–ø—É—â–µ–Ω–æ –∑–∞–Ω–æ–≤–æ."
        )
        
        if result:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
                script_path = self.scripts_dir / "steamdeck_gui.py"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not script_path.exists():
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–∫—Ä–∏–ø—Ç GUI –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                restart_script = self.project_root / "restart_gui.sh"
                restart_script_content = f"""#!/bin/bash
# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ GUI
cd "{self.project_root}"
python3 "{script_path}" &
# –£–¥–∞–ª—è–µ–º —Å–µ–±—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
rm -f "{restart_script}"
"""
                
                with open(restart_script, 'w') as f:
                    f.write(restart_script_content)
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
                os.chmod(restart_script, 0o755)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                import subprocess
                subprocess.Popen([str(restart_script)], 
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL,
                               stdin=subprocess.DEVNULL)
                
                self.append_output("‚úÖ GUI –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                time.sleep(2)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
                self.root.quit()
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ GUI: {e}")
                self.append_output(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    def update_utility(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        import subprocess
        
        try:
            script_path = self.scripts_dir / "steamdeck_update.sh"
            if not script_path.exists():
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            check_result = subprocess.run(
                ["bash", str(script_path), "check"],
                capture_output=True,
                text=True,
                cwd=str(self.project_root)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if check_result.returncode == 0 and "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" in check_result.stdout:
                # –ï—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                result = messagebox.askyesno(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã",
                    "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!\n\n"
                    "–û–±–Ω–æ–≤–∏—Ç—å Steam Deck Enhancement Pack –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏?\n\n"
                    "–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏.\n"
                    "GUI –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                )
                
                if result:
                    self.run_update_with_dialog("steamdeck_update.sh", "update", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã...")
            else:
                # –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞
                messagebox.showinfo(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                    "–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —É—Ç–∏–ª–∏—Ç—ã."
                )
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    def rollback_update(self):
        """–û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        result = messagebox.askyesno(
            "–û—Ç–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "–û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã?\n\n"
            "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."
        )
        
        if result:
            self.run_update_with_dialog("steamdeck_update.sh", "rollback", "–û—Ç–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    def run_system_setup(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        result = messagebox.askyesno(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É Steam Deck?\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ readonly —Ä–µ–∂–∏–º–∞\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫—É pacman\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É AUR-—Ö–µ–ª–ø–µ—Ä–∞\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É Wine –∏ ProtonTricks\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        if result:
            self.run_script_with_progress("steamdeck_setup.sh", "setup", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã Steam Deck...")
    
    def run_backup(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        result = messagebox.askyesno(
            "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–∏—Å—Ç–µ–º—ã?\n\n"
            "–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤ —Å:\n"
            "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
            "‚Ä¢ –°–ø–∏—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ü–û\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        if result:
            self.run_script_with_progress("steamdeck_backup.sh", "backup", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    def install_steamdeck_utils(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å Steam Deck"""
        result = messagebox.askyesno(
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç—ã",
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Steam Deck Enhancement Pack –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å?\n\n"
            "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å sudo –¥–ª—è:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è desktop —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n\n"
            "–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç:\n"
            "‚Ä¢ –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤ /home/deck/\n"
            "‚Ä¢ –Ø—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —É—Ç–∏–ª–∏—Ç–µ\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        if result:
            self.run_script_with_sudo("steamdeck_setup.sh", "install-utils")
    
    def configure_settings(self):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        dialog.geometry("500x400")
        dialog.configure(bg='#2b2b2b')
        dialog.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(dialog, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Steam Deck Enhancement Pack", 
                              font=('Arial', 14, 'bold'), fg='white', bg='#2b2b2b')
        title_label.pack(pady=20)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = tk.Label(dialog, 
                             text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
                             font=('Arial', 10), fg='white', bg='#2b2b2b')
        desc_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        button_frame = tk.Frame(dialog, bg='#2b2b2b')
        button_frame.pack(pady=20)
        
        tk.Button(button_frame, text="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", 
                 command=lambda: [dialog.destroy(), self.create_default_config()],
                 bg='#4CAF50', fg='white', font=('Arial', 12, 'bold'), 
                 width=20, height=2).pack(pady=10)
        
        default_info = tk.Label(button_frame,
                               text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: deck\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /home/deck/SteamDeck",
                               font=('Arial', 9), fg='#aaa', bg='#2b2b2b')
        default_info.pack(pady=5)
        
        tk.Button(button_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", 
                 command=lambda: [dialog.destroy(), self.create_custom_config()],
                 bg='#2196F3', fg='white', font=('Arial', 12, 'bold'), 
                 width=20, height=2).pack(pady=10)
        
        custom_info = tk.Label(button_frame,
                              text="–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                              font=('Arial', 9), fg='#aaa', bg='#2b2b2b')
        custom_info.pack(pady=5)
        
        tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
                 command=dialog.destroy,
                 bg='#666666', fg='white', width=20).pack(pady=10)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            config_path = self.project_root / "config.env"
            
            if config_path.exists():
                result = messagebox.askyesno(
                    "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    "–§–∞–π–ª config.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"
                )
                if not result:
                    return
            
            config_content = """# Steam Deck Enhancement Pack Configuration
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ GUI

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Steam Deck
STEAMDECK_USER=deck

# –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STEAMDECK_HOME=/home/deck

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–∏–ª–∏—Ç—ã
STEAMDECK_INSTALL_DIR=/home/deck/SteamDeck
"""
            
            with open(config_path, 'w') as f:
                f.write(config_content)
            
            self.logger.log_success("Config Creation", "Default config created")
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n{config_path}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        except Exception as e:
            self.logger.log_error("Config Creation", str(e))
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{e}")
    
    def create_custom_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        dialog.geometry("600x500")
        dialog.configure(bg='#2b2b2b')
        dialog.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(dialog, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", 
                              font=('Arial', 14, 'bold'), fg='white', bg='#2b2b2b')
        title_label.pack(pady=20)
        
        # –§–æ—Ä–º–∞
        form_frame = tk.Frame(dialog, bg='#2b2b2b')
        form_frame.pack(padx=20, pady=10, fill='both', expand=True)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        tk.Label(form_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Steam Deck:", 
                fg='white', bg='#2b2b2b', font=('Arial', 10)).pack(anchor='w', pady=5)
        user_entry = tk.Entry(form_frame, font=('Arial', 10), width=40)
        user_entry.insert(0, "deck")
        user_entry.pack(pady=5)
        
        tk.Label(form_frame, text="(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: deck)", 
                fg='#aaa', bg='#2b2b2b', font=('Arial', 8)).pack(anchor='w')
        
        # –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        tk.Label(form_frame, text="–î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", 
                fg='white', bg='#2b2b2b', font=('Arial', 10)).pack(anchor='w', pady=(15, 5))
        home_entry = tk.Entry(form_frame, font=('Arial', 10), width=40)
        home_entry.insert(0, "/home/deck")
        home_entry.pack(pady=5)
        
        tk.Label(form_frame, text="(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /home/deck)", 
                fg='#aaa', bg='#2b2b2b', font=('Arial', 8)).pack(anchor='w')
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        tk.Label(form_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–∏–ª–∏—Ç—ã:", 
                fg='white', bg='#2b2b2b', font=('Arial', 10)).pack(anchor='w', pady=(15, 5))
        install_entry = tk.Entry(form_frame, font=('Arial', 10), width=40)
        install_entry.insert(0, "/home/deck/SteamDeck")
        install_entry.pack(pady=5)
        
        tk.Label(form_frame, text="(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /home/deck/SteamDeck)", 
                fg='#aaa', bg='#2b2b2b', font=('Arial', 8)).pack(anchor='w')
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(dialog, bg='#2b2b2b')
        button_frame.pack(pady=20)
        
        def save_custom_config():
            user = user_entry.get().strip()
            home = home_entry.get().strip()
            install_dir = install_entry.get().strip()
            
            if not user or not home or not install_dir:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return
            
            try:
                config_path = self.project_root / "config.env"
                
                if config_path.exists():
                    result = messagebox.askyesno(
                        "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                        "–§–∞–π–ª config.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"
                    )
                    if not result:
                        return
                
                config_content = f"""# Steam Deck Enhancement Pack Configuration
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Steam Deck
STEAMDECK_USER={user}

# –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STEAMDECK_HOME={home}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–∏–ª–∏—Ç—ã
STEAMDECK_INSTALL_DIR={install_dir}
"""
                
                with open(config_path, 'w') as f:
                    f.write(config_content)
                
                self.logger.log_success("Config Creation", 
                                       f"Custom config: user={user}, home={home}")
                dialog.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", 
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n{config_path}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n"
                    f"–î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {home}\n"
                    f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_dir}")
            except Exception as e:
                self.logger.log_error("Config Creation", str(e))
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{e}")
        
        tk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                 command=save_custom_config,
                 bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'), 
                 width=15).pack(side='left', padx=5)
        
        tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
                 command=dialog.destroy,
                 bg='#666666', fg='white', width=15).pack(side='left', padx=5)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
    
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            file_path = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤",
                defaultextension=".log",
                filetypes=[("Log files", "*.log"), ("All files", "*.*")],
                initialname=f"steamdeck_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
            )
            
            if not file_path:
                return
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏
            if self.logger.export_logs(file_path):
                self.logger.log_success("Log Export", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {file_path}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", 
                    f"–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n{file_path}\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏")
        
        except Exception as e:
            self.logger.log_error("Log Export", str(e))
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤:\n{e}")
    
    def run_cleanup(self):
        """–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        dialog.geometry("500x400")
        dialog.configure(bg='#2b2b2b')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏", 
                              font=('Arial', 14, 'bold'), fg='white', bg='#2b2b2b')
        title_label.pack(pady=20)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        info_frame = tk.Frame(dialog, bg='#2b2b2b')
        info_frame.pack(fill='x', padx=20, pady=10)
        
        safe_text = """üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
‚Ä¢ –ö—ç—à pacman
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ö—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        
        full_text = """üü° –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ):
‚Ä¢ –í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ
‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã
‚Ä¢ –°—Ç–∞—Ä—ã–µ —è–¥—Ä–∞
‚Ä¢ –ö—ç—à Steam"""
        
        tk.Label(info_frame, text=safe_text, fg='white', bg='#2b2b2b', 
                font=('Arial', 10), justify='left').pack(anchor='w', pady=5)
        
        tk.Label(info_frame, text=full_text, fg='yellow', bg='#2b2b2b', 
                font=('Arial', 10), justify='left').pack(anchor='w', pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(dialog, bg='#2b2b2b')
        button_frame.pack(pady=20)
        
        tk.Button(button_frame, text="–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", 
                 command=lambda: [dialog.destroy(), self.run_script_with_progress("steamdeck_cleanup.sh", "safe", "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")],
                 bg='#4CAF50', fg='white', font=('Arial', 12, 'bold'), width=20).pack(pady=5)
        
        tk.Button(button_frame, text="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", 
                 command=lambda: [dialog.destroy(), self.run_script_with_progress("steamdeck_cleanup.sh", "full", "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")],
                 bg='#FF9800', fg='white', font=('Arial', 12, 'bold'), width=20).pack(pady=5)
        
        tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
                 command=dialog.destroy,
                 bg='#666666', fg='white', width=20).pack(pady=5)
    
    def run_update_with_dialog(self, script_name, args="", message=""):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –¥–∏–∞–ª–æ–≥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        import subprocess
        import threading
        
        def run_update_thread():
            try:
                script_path = self.scripts_dir / script_name
                if not script_path.exists():
                    self.root.after(0, lambda: self.show_update_error(f"–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.root.after(0, lambda: self.show_progress(message or f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {script_name}..."))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
                result = subprocess.run(
                    ["bash", str(script_path), args] if args else ["bash", str(script_path)],
                    capture_output=True,
                    text=True,
                    cwd=str(self.project_root)
                )
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.root.after(0, self.hide_progress)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥–∏–∞–ª–æ–≥–µ
                self.root.after(0, lambda: self.show_update_result(result, args))
                
            except Exception as e:
                self.root.after(0, self.hide_progress)
                self.root.after(0, lambda: self.show_update_error(str(e)))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_update_thread)
        thread.daemon = True
        thread.start()
    
    def run_script_with_progress(self, script_name, args="", message=""):
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        import subprocess
        import threading
        
        def run_with_progress():
            try:
                script_path = self.scripts_dir / script_name
                if not script_path.exists():
                    self.root.after(0, lambda: self.append_output(f"–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.root.after(0, lambda: self.show_progress(message or f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {script_name}..."))
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
                process = subprocess.Popen(
                    ["bash", str(script_path), args] if args else ["bash", str(script_path)],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                while True:
                    output = process.stdout.readline()
                    if output == '' and process.poll() is not None:
                        break
                    if output:
                        self.root.after(0, lambda o=output: self.append_output(o.strip()))
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
                return_code = process.poll()
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.root.after(0, self.hide_progress)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if return_code == 0:
                    self.root.after(0, lambda: self.append_output(f"‚úÖ {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
                else:
                    self.root.after(0, lambda: self.append_output(f"‚ùå {script_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {return_code})"))
                
            except Exception as e:
                self.root.after(0, self.hide_progress)
                self.root.after(0, lambda: self.append_output(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_name}: {e}"))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_with_progress)
        thread.daemon = True
        thread.start()
            
    def add_to_steam_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Steam"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –≤ Steam")
        dialog.geometry("400x200")
        dialog.configure(bg='#2b2b2b')
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:").pack(pady=5)
        name_entry = ttk.Entry(dialog, width=40)
        name_entry.pack(pady=5)
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        ttk.Label(dialog, text="–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É:").pack(pady=5)
        path_frame = ttk.Frame(dialog)
        path_frame.pack(pady=5)
        
        path_entry = ttk.Entry(path_frame, width=30)
        path_entry.pack(side='left', padx=5)
        
        def browse_file():
            file_path = filedialog.askopenfilename()
            if file_path:
                path_entry.delete(0, tk.END)
                path_entry.insert(0, file_path)
        
        ttk.Button(path_frame, text="–û–±–∑–æ—Ä", command=browse_file).pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(dialog)
        button_frame.pack(pady=20)
        
        def add_to_steam():
            name = name_entry.get()
            path = path_entry.get()
            
            if name and path:
                self.run_script("steamdeck_shortcuts.sh", f'create "{name}" "{path}"')
                dialog.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        
        ttk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=add_to_steam).pack(side='left', padx=5)
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side='left', padx=5)
        
    def refresh_logs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        self.logs_text.delete(1.0, tk.END)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
        try:
            result = subprocess.run(['journalctl', '--no-pager', '-n', '50'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                self.logs_text.insert(tk.END, result.stdout)
            else:
                self.logs_text.insert(tk.END, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã\n")
        except Exception as e:
            self.logs_text.insert(tk.END, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}\n")
            
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.delete(1.0, tk.END)
        
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(self.logs_text.get(1.0, tk.END))
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
                
    def show_about(self):
        """–û–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        about_text = f"""
Steam Deck Enhancement Pack GUI v{self.version}

–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏ Steam Deck.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π Steam Deck
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ Offline-—Ä–µ–∂–∏–º –∏ —Ç—Ä—é–∫–∏
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏ ROM-–∞–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–ê–≤—Ç–æ—Ä: @ncux11
–í–µ—Ä—Å–∏—è: {self.version} (–û–∫—Ç—è–±—Ä—å 2025)

‚ö†Ô∏è –î–ò–°–ö–õ–ï–ô–ú–ï–†:
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "As Is" (–∫–∞–∫ –µ—Å—Ç—å).
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–¥–µ—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è.
–ö–æ–Ω—Å–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        dialog = tk.Toplevel(self.root)
        dialog.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        dialog.geometry("700x500")
        dialog.configure(bg='#2b2b2b')
        dialog.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        dialog.transient(self.root)
        
        # –°–æ–∑–¥–∞–µ–º Text –≤–∏–¥–∂–µ—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_frame = tk.Frame(dialog, bg='#2b2b2b')
        text_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        text_widget = tk.Text(text_frame, 
                             height=20, 
                             width=80,
                             bg='#1e1e1e',
                             fg='white',
                             font=('Arial', 11),
                             wrap=tk.WORD,
                             padx=10,
                             pady=10)
        
        text_widget.insert('1.0', about_text)
        text_widget.config(state=tk.DISABLED)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        scrollbar = tk.Scrollbar(text_frame, command=text_widget.yview)
        text_widget.config(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        text_widget.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        button_frame = tk.Frame(dialog, bg='#2b2b2b')
        button_frame.pack(pady=10)
        
        tk.Button(button_frame, 
                 text="–ó–∞–∫—Ä—ã—Ç—å", 
                 command=dialog.destroy,
                 bg='#4CAF50',
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 width=15).pack()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
    def open_documentation(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        docs_path = self.scripts_dir.parent / "README.md"
        if docs_path.exists():
            try:
                subprocess.run(['xdg-open', str(docs_path)])
            except:
                messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", 
                                  f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: {docs_path}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def load_offline_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ offline-—Ä–µ–∂–∏–º–µ"""
        try:
            info = "=== OFFLINE-–†–ï–ñ–ò–ú STEAM DECK ===\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ offline-—É—Ç–∏–ª–∏—Ç
            offline_dir = Path.home() / "SteamDeck_Offline"
            if offline_dir.exists():
                info += "‚úÖ Offline-—É—Ç–∏–ª–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
                profiles_dir = Path.home() / ".steamdeck_profiles"
                if profiles_dir.exists():
                    profiles = list(profiles_dir.glob("*.sh"))
                    info += f"‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(profiles)}\n"
                else:
                    info += "‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫—É
                media_dir = offline_dir / "Media"
                if media_dir.exists():
                    media_files = list(media_dir.rglob("*"))
                    info += f"‚úÖ –ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã: {len(media_files)}\n"
                else:
                    info += "‚ùå –ú–µ–¥–∏–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ROM-—ã
                roms_dir = offline_dir / "ROMs"
                if roms_dir.exists():
                    rom_files = list(roms_dir.rglob("*"))
                    info += f"‚úÖ ROM-—Ñ–∞–π–ª—ã: {len(rom_files)}\n"
                else:
                    info += "‚ùå ROM-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n"
                    
            else:
                info += "‚ùå Offline-—É—Ç–∏–ª–∏—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                info += "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Offline' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Steam
            steam_config = Path.home() / ".steam" / "steam" / "config" / "config.vdf"
            if steam_config.exists():
                with open(steam_config, 'r') as f:
                    content = f.read()
                    if "AutoUpdateBehavior=0" in content:
                        info += "‚úÖ Steam –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è offline-—Ä–µ–∂–∏–º–∞\n"
                    else:
                        info += "‚ö†Ô∏è Steam –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è offline-—Ä–µ–∂–∏–º–∞\n"
            else:
                info += "‚ùå Steam –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            try:
                result = subprocess.run(['rfkill', 'list'], capture_output=True, text=True)
                if 'wifi' in result.stdout.lower():
                    if 'blocked' in result.stdout.lower():
                        info += "üì∂ Wi-Fi –æ—Ç–∫–ª—é—á–µ–Ω (—ç–∫–æ–Ω–æ–º–∏—è –±–∞—Ç–∞—Ä–µ–∏)\n"
                    else:
                        info += "üì∂ Wi-Fi –≤–∫–ª—é—á–µ–Ω\n"
            except:
                info += "‚ùì –°—Ç–∞—Ç—É—Å Wi-Fi –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\n"
            
            self.offline_info.insert(tk.END, info)
            
        except Exception as e:
            self.offline_info.insert(tk.END, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def run_offline_menu(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é offline-—É—Ç–∏–ª–∏—Ç"""
        menu_path = Path.home() / "SteamDeck_Offline" / "offline_menu.sh"
        if menu_path.exists():
            self.run_script(str(menu_path))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "Offline-–º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É offline-—Ä–µ–∂–∏–º–∞.")
    
    def run_steam_offline(self):
        """–ó–∞–ø—É—Å–∫ Steam –≤ offline-—Ä–µ–∂–∏–º–µ"""
        steam_offline_path = Path.home() / "SteamDeck_Offline" / "launch_steam_offline.sh"
        if steam_offline_path.exists():
            self.run_script(str(steam_offline_path))
        else:
            # –ó–∞–ø—É—Å–∫ Steam —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º offline
            self.run_script("steam", "--offline")
    
    def run_max_performance(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        profile_path = Path.home() / ".steamdeck_profiles" / "max_performance.sh"
        if profile_path.exists():
            self.run_script(str(profile_path))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_balanced_profile(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        profile_path = Path.home() / ".steamdeck_profiles" / "balanced.sh"
        if profile_path.exists():
            self.run_script(str(profile_path))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_battery_saver(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏"""
        profile_path = Path.home() / ".steamdeck_profiles" / "battery_saver.sh"
        if profile_path.exists():
            self.run_script(str(profile_path))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_free_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        memory_script = Path.home() / "SteamDeck_Offline" / "free_memory.sh"
        if memory_script.exists():
            self.run_script(str(memory_script))
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
            self.run_script("sudo", "sync")
            self.run_script("sudo", "sh", "-c", "echo 3 > /proc/sys/vm/drop_caches")
    
    def run_backup_saves(self):
        """–ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏–≥—Ä"""
        backup_script = Path.home() / "SteamDeck_Offline" / "backup_saves.sh"
        if backup_script.exists():
            self.run_script(str(backup_script))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_media_manager(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π"""
        media_script = Path.home() / "SteamDeck_Offline" / "manage_media.sh"
        if media_script.exists():
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
            dialog = tk.Toplevel(self.root)
            dialog.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–µ–¥–∏–∞")
            dialog.geometry("300x200")
            dialog.configure(bg='#2b2b2b')
            
            ttk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", font=('Arial', 12, 'bold')).pack(pady=10)
            
            actions = [
                ("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", "scan"),
                ("–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", "backup"),
                ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞", "restore"),
                ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã", "organize")
            ]
            
            for text, action in actions:
                ttk.Button(dialog, text=text, 
                          command=lambda a=action: self.run_script(str(media_script), a)).pack(pady=5)
            
            ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(pady=10)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_retroarch(self):
        """–ó–∞–ø—É—Å–∫ RetroArch"""
        self.run_script("retroarch")
    
    def run_roms_manager(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ROM-–∞–º–∏"""
        roms_script = Path.home() / "SteamDeck_Offline" / "manage_roms.sh"
        if roms_script.exists():
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
            dialog = tk.Toplevel(self.root)
            dialog.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ROM-–∞–º–∏")
            dialog.geometry("300x200")
            dialog.configure(bg='#2b2b2b')
            
            ttk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", font=('Arial', 12, 'bold')).pack(pady=10)
            
            actions = [
                ("–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø ROM-–æ–≤", "backup"),
                ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ROM-—ã", "restore"),
                ("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å ROM-—ã", "organize")
            ]
            
            for text, action in actions:
                ttk.Button(dialog, text=text, 
                          command=lambda a=action: self.run_script(str(roms_script), a)).pack(pady=5)
            
            ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(pady=10)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ROM-–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_vlc(self):
        """–ó–∞–ø—É—Å–∫ VLC –º–µ–¥–∏–∞-–ø–ª–µ–µ—Ä–∞"""
        self.run_script("vlc")
    
    def disable_wifi(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Wi-Fi"""
        self.run_script("sudo", "rfkill", "block", "wifi")
        messagebox.showinfo("Wi-Fi", "Wi-Fi –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏")
    
    def enable_wifi(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ Wi-Fi"""
        self.run_script("sudo", "rfkill", "unblock", "wifi")
        messagebox.showinfo("Wi-Fi", "Wi-Fi –≤–∫–ª—é—á–µ–Ω")
    
    def run_auto_profile(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
        auto_script = Path.home() / "SteamDeck_Offline" / "auto_profile_switch.sh"
        if auto_script.exists():
            self.run_script(str(auto_script))
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    def run_game_with_sniper(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ SteamLinuxRuntime - Sniper"""
        game_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Sniper",
            filetypes=[("Executable files", "*.sh *.x86_64 *.bin"), ("All files", "*.*")]
        )
        
        if game_path:
            sniper_dir = Path.home() / ".steam/steam/steamapps/common/SteamLinuxRuntime_sniper"
            sniper_run = sniper_dir / "run"
            
            if sniper_run.exists():
                self.run_script(str(sniper_run), f"-- \"{game_path}\"")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", 
                                   "SteamLinuxRuntime - Sniper –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                                   "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ Steam: steam steam://install/1628350")
    
    def diagnose_game(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∏–≥—Ä–æ–π"""
        game_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            filetypes=[("Executable files", "*.sh *.x86_64 *.bin"), ("All files", "*.*")]
        )
        
        if game_path:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            dialog = tk.Toplevel(self.root)
            dialog.title("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã")
            dialog.geometry("600x400")
            dialog.configure(bg='#2b2b2b')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ttk.Label(dialog, text=f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {Path(game_path).name}", 
                     font=('Arial', 12, 'bold')).pack(pady=10)
            
            # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
            output_frame = ttk.LabelFrame(dialog, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            output_frame.pack(fill='both', expand=True, padx=10, pady=10)
            
            output_text = scrolledtext.ScrolledText(output_frame, height=15, 
                                                  bg='#1e1e1e', fg='white')
            output_text.pack(fill='both', expand=True, padx=5, pady=5)
            
            def run_diagnosis():
                output_text.insert(tk.END, f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã: {game_path}\n\n")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                output_text.insert(tk.END, "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:\n")
                try:
                    result = subprocess.run(['ldd', game_path], capture_output=True, text=True)
                    if result.returncode == 0:
                        missing = [line for line in result.stdout.split('\n') if 'not found' in line]
                        if missing:
                            output_text.insert(tk.END, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n")
                            for dep in missing:
                                output_text.insert(tk.END, f"  {dep}\n")
                        else:
                            output_text.insert(tk.END, "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã\n")
                    else:
                        output_text.insert(tk.END, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n")
                except Exception as e:
                    output_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}\n")
                
                output_text.insert(tk.END, "\n")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
                output_text.insert(tk.END, "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n")
                try:
                    result = subprocess.run(['file', game_path], capture_output=True, text=True)
                    if result.returncode == 0:
                        output_text.insert(tk.END, f"  {result.stdout.strip()}\n")
                    else:
                        output_text.insert(tk.END, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É\n")
                except Exception as e:
                    output_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}\n")
                
                output_text.insert(tk.END, "\n")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
                output_text.insert(tk.END, "üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:\n")
                try:
                    result = subprocess.run(['ls', '-la', game_path], capture_output=True, text=True)
                    if result.returncode == 0:
                        output_text.insert(tk.END, f"  {result.stdout.strip()}\n")
                    else:
                        output_text.insert(tk.END, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n")
                except Exception as e:
                    output_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}\n")
                
                output_text.insert(tk.END, "\n")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Sniper
                sniper_dir = Path.home() / ".steam/steam/steamapps/common/SteamLinuxRuntime_sniper"
                if sniper_dir.exists():
                    output_text.insert(tk.END, "‚úÖ SteamLinuxRuntime - Sniper –Ω–∞–π–¥–µ–Ω\n")
                    output_text.insert(tk.END, "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —á–µ—Ä–µ–∑ Sniper\n")
                else:
                    output_text.insert(tk.END, "‚ùå SteamLinuxRuntime - Sniper –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
                    output_text.insert(tk.END, "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Sniper –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n")
                
                output_text.see(tk.END)
            
            # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=run_diagnosis, daemon=True).start()
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            ttk.Button(dialog, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy).pack(pady=10)
    
    def run_steamrip_handler(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ SteamRip RAR"""
        self.show_progress("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SteamRip...")
        self.run_script("steamdeck_steamrip.sh", "setup")
    
    def find_steamrip_rar(self):
        """–ü–æ–∏—Å–∫ RAR —Ñ–∞–π–ª–æ–≤ SteamRip"""
        self.show_progress("–ü–æ–∏—Å–∫ RAR —Ñ–∞–π–ª–æ–≤...")
        self.run_script("steamdeck_steamrip.sh", "find")
    
    def batch_process_steamrip(self):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SteamRip RAR"""
        self.show_progress("–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ RAR —Ñ–∞–π–ª–æ–≤...")
        self.run_script("steamdeck_steamrip.sh", "batch")
    
    def extract_steamrip_rar(self):
        """–î–∏–∞–ª–æ–≥ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ RAR —Ñ–∞–π–ª–∞ SteamRip"""
        rar_file = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ RAR —Ñ–∞–π–ª SteamRip –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏",
            filetypes=[("RAR files", "*.rar"), ("All files", "*.*")]
        )
        
        if rar_file:
            self.show_progress(f"–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ {os.path.basename(rar_file)}...")
            self.run_script("steamdeck_steamrip.sh", f"extract \"{rar_file}\"")
    
    def analyze_steamrip_rar(self):
        """–î–∏–∞–ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞ RAR —Ñ–∞–π–ª–∞ SteamRip"""
        rar_file = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ RAR —Ñ–∞–π–ª SteamRip –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            filetypes=[("RAR files", "*.rar"), ("All files", "*.*")]
        )
        
        if rar_file:
            self.show_progress(f"–ê–Ω–∞–ª–∏–∑ {os.path.basename(rar_file)}...")
            self.run_script("steamdeck_steamrip.sh", f"analyze \"{rar_file}\"")

    def create_artwork_tab(self, notebook):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ '–û–±–ª–æ–∂–∫–∏'"""
        artwork_frame = ttk.Frame(notebook)
        notebook.add(artwork_frame, text="üé® –û–±–ª–æ–∂–∫–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(artwork_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∞–º–∏ Steam Deck", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(artwork_frame)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏
        left_frame = ttk.Frame(main_frame)
        left_frame.pack(side='left', fill='y', padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã
        utils_frame = ttk.LabelFrame(left_frame, text="–û–±–ª–æ–∂–∫–∏ —É—Ç–∏–ª–∏—Ç—ã", padding=10)
        utils_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Button(utils_frame, text="–°–æ–∑–¥–∞—Ç—å –æ–±–ª–æ–∂–∫–∏ —É—Ç–∏–ª–∏—Ç—ã", 
                  command=self.create_utils_artwork).pack(fill='x', pady=2)
        
        ttk.Button(utils_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–ª–æ–∂–∫–∏ —É—Ç–∏–ª–∏—Ç—ã", 
                  command=self.install_utils_artwork).pack(fill='x', pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä
        games_frame = ttk.LabelFrame(left_frame, text="–û–±–ª–æ–∂–∫–∏ –∏–≥—Ä", padding=10)
        games_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Button(games_frame, text="–°–æ–∑–¥–∞—Ç—å –æ–±–ª–æ–∂–∫–∏ –∏–≥—Ä—ã", 
                  command=self.create_game_artwork).pack(fill='x', pady=2)
        
        ttk.Button(games_frame, text="–°–∫–∞—á–∞—Ç—å —Å Steam Grid DB", 
                  command=self.download_from_steamgriddb).pack(fill='x', pady=2)
        
        ttk.Button(games_frame, text="–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", 
                  command=self.batch_install_artwork).pack(fill='x', pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        emulators_frame = ttk.LabelFrame(left_frame, text="–û–±–ª–æ–∂–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤", padding=10)
        emulators_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Button(emulators_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–ª–æ–∂–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤", 
                  command=self.install_emulator_artwork).pack(fill='x', pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        templates_frame = ttk.LabelFrame(left_frame, text="–®–∞–±–ª–æ–Ω—ã", padding=10)
        templates_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Button(templates_frame, text="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", 
                  command=self.create_artwork_templates).pack(fill='x', pady=2)
        
        ttk.Button(templates_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –æ–±–ª–æ–∂–µ–∫", 
                  command=self.open_artwork_folder).pack(fill='x', pady=2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥
        right_frame = ttk.Frame(main_frame)
        right_frame.pack(side='right', fill='both', expand=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(right_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill='x', pady=(0, 10))
        
        info_text = """
üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∞–º–∏ Steam Deck

üìê –†–∞–∑–º–µ—Ä—ã –æ–±–ª–æ–∂–µ–∫:
‚Ä¢ Grid: 460x215 (–≥–ª–∞–≤–Ω–∞—è –æ–±–ª–æ–∂–∫–∞)
‚Ä¢ Hero: 3840x1240 (—à–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è)
‚Ä¢ Logo: 512x512 (–ª–æ–≥–æ—Ç–∏–ø)
‚Ä¢ Icon: 256x256 (–∏–∫–æ–Ω–∫–∞)

üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
‚Ä¢ ImageMagick - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫
‚Ä¢ Steam Grid DB - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫
‚Ä¢ GIMP/Photoshop - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

üìÅ –ü–∞–ø–∫–∏:
‚Ä¢ ~/SteamDeck/artwork/ - –≤—Å–µ –æ–±–ª–æ–∂–∫–∏
‚Ä¢ ~/SteamDeck/artwork/utils/ - –æ–±–ª–æ–∂–∫–∏ —É—Ç–∏–ª–∏—Ç—ã
‚Ä¢ ~/SteamDeck/artwork/games/ - –æ–±–ª–æ–∂–∫–∏ –∏–≥—Ä
‚Ä¢ ~/SteamDeck/artwork/emulators/ - –æ–±–ª–æ–∂–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        """
        
        info_label = ttk.Label(info_frame, text=info_text, justify='left')
        info_label.pack(anchor='w')
        
        # –ü–∞–Ω–µ–ª—å –≤—ã–≤–æ–¥–∞
        output_frame = ttk.LabelFrame(right_frame, text="–í—ã–≤–æ–¥", padding=10)
        output_frame.pack(fill='both', expand=True)
        
        self.artwork_output = scrolledtext.ScrolledText(output_frame, height=15, width=60)
        self.artwork_output.pack(fill='both', expand=True)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±–ª–æ–∂–µ–∫
        self.artwork_progress = ttk.Progressbar(output_frame, mode='indeterminate')
        self.artwork_progress.pack(fill='x', pady=(5, 0))
        
        self.artwork_progress_label = ttk.Label(output_frame, text="")
        self.artwork_progress_label.pack(pady=(2, 0))

    def create_utils_artwork(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã"""
        self.run_script("steamdeck_create_artwork.sh", "create-utils", 
                       "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã...")

    def install_utils_artwork(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã"""
        self.run_script("steamdeck_artwork.sh", "install-utils", 
                       "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã...")

    def create_game_artwork(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –∏–≥—Ä—ã"""
        game_name = simpledialog.askstring("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:")
        if game_name:
            self.run_script("steamdeck_create_artwork.sh", f"create-game \"{game_name}\"", 
                           f"–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –∏–≥—Ä—ã '{game_name}'...")

    def download_from_steamgriddb(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —Å Steam Grid DB"""
        game_name = simpledialog.askstring("Steam Grid DB", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:")
        if game_name:
            self.run_script("steamdeck_steamgriddb.sh", f"install \"{game_name}\"", 
                           f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è '{game_name}' —Å Steam Grid DB...")

    def batch_install_artwork(self):
        """–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫"""
        self.run_script("steamdeck_steamgriddb.sh", "batch", 
                       "–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫...")

    def install_emulator_artwork(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        self.run_script("steamdeck_artwork.sh", "install-emulators", 
                       "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤...")

    def create_artwork_templates(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–ª–æ–∂–µ–∫"""
        self.run_script("steamdeck_create_artwork.sh", "create-templates", 
                       "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–ª–æ–∂–µ–∫...")

    def open_artwork_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å –æ–±–ª–æ–∂–∫–∞–º–∏"""
        artwork_dir = self.project_root / "artwork"
        if artwork_dir.exists():
            subprocess.Popen(["dolphin", str(artwork_dir)])
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–∞–ø–∫–∞ —Å –æ–±–ª–æ–∂–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±–ª–æ–∂–∫–∏.")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è GUI"""
    missing_deps = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
    try:
        import tkinter
    except ImportError:
        missing_deps.append("tkinter (python3-tk)")
    
    try:
        import psutil
    except ImportError:
        missing_deps.append("psutil")
    
    if missing_deps:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   sudo pacman -S python3-tk")
        print("   pip install psutil")
        return False
    
    return True


def check_installation():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–∏–ª–∏—Ç—ã –≤ –ø–∞–º—è—Ç—å Steam Deck
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ desktop —Ñ–∞–π–ª–∞
    """
    try:
        home_dir = Path.home()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
        steamdeck_utils_link = home_dir / "steamdeck-utils"
        steamdeck_update_link = home_dir / "steamdeck-update"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º desktop —Ñ–∞–π–ª
        desktop_file = home_dir / ".local" / "share" / "applications" / "steamdeck-enhancement.desktop"
        
        links_exist = steamdeck_utils_link.exists() and steamdeck_update_link.exists()
        desktop_exists = desktop_file.exists()
        
        return {
            'installed': links_exist and desktop_exists,
            'links_exist': links_exist,
            'desktop_exists': desktop_exists,
            'steamdeck_utils_link': steamdeck_utils_link,
            'steamdeck_update_link': steamdeck_update_link,
            'desktop_file': desktop_file
        }
    except Exception as e:
        return {
            'installed': False,
            'error': str(e)
        }


def install_utility_now():
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç—ã –≤ –ø–∞–º—è—Ç—å Steam Deck
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ steamdeck_setup.sh
        script_path = Path(__file__).parent / "steamdeck_setup.sh"
        
        if not script_path.exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        result = subprocess.run([
            "bash", str(script_path), "install-utils"
        ], capture_output=True, text=True, cwd=str(script_path.parent.parent))
        
        if result.returncode == 0:
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                "–£—Ç–∏–ª–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å Steam Deck!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –µ—ë –∏–∑ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É 'steamdeck-utils'.")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", 
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ç–∏–ª–∏—Ç—ã:\n\n{result.stderr}")
    
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É: {e}")


def show_first_launch_dialog():
    """
    –î–∏–∞–ª–æ–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–∏–ª–∏—Ç—ã
    """
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
    dialog = tk.Toplevel(root)
    dialog.title("Steam Deck Enhancement Pack - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫")
    dialog.geometry("600x400")
    dialog.configure(bg='#2b2b2b')
    dialog.resizable(False, False)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    dialog.transient(root)
    dialog.grab_set()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title_label = tk.Label(dialog, 
                          text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Steam Deck Enhancement Pack!",
                          font=('Arial', 16, 'bold'), 
                          fg='#4CAF50', 
                          bg='#2b2b2b')
    title_label.pack(pady=20)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    installation_status = check_installation()
    
    if installation_status.get('installed', False):
        # –£—Ç–∏–ª–∏—Ç–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        status_text = "‚úÖ –£—Ç–∏–ª–∏—Ç–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å Steam Deck"
        status_color = '#4CAF50'
        button_text = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        button_command = lambda: [dialog.destroy(), root.destroy()]
    else:
        # –£—Ç–∏–ª–∏—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        status_text = "‚ö†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å Steam Deck"
        status_color = '#FF9800'
        button_text = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"
        button_command = lambda: [dialog.destroy(), root.destroy(), install_utility_now()]
    
    status_label = tk.Label(dialog, 
                           text=status_text,
                           font=('Arial', 12), 
                           fg=status_color, 
                           bg='#2b2b2b')
    status_label.pack(pady=10)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    if not installation_status.get('installed', False):
        desc_text = """
–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É –≤ –ø–∞–º—è—Ç—å Steam Deck.

–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç:
‚Ä¢ –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
‚Ä¢ –Ø—Ä–ª—ã–∫ –≤ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É —Å–µ–π—á–∞—Å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é "–°–∏—Å—Ç–µ–º–∞" ‚Üí "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É".
        """
    else:
        desc_text = """
–£—Ç–∏–ª–∏—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """
    
    desc_label = tk.Label(dialog, 
                         text=desc_text.strip(),
                         font=('Arial', 10), 
                         fg='white', 
                         bg='#2b2b2b',
                         justify='left')
    desc_label.pack(pady=20, padx=20)
    
    # –ö–Ω–æ–ø–∫–∏
    button_frame = tk.Frame(dialog, bg='#2b2b2b')
    button_frame.pack(pady=20)
    
    if not installation_status.get('installed', False):
        # –ö–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"
        install_btn = tk.Button(button_frame, 
                               text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å",
                               command=lambda: [dialog.destroy(), root.destroy(), install_utility_now()],
                               bg='#4CAF50', 
                               fg='white', 
                               font=('Arial', 12, 'bold'),
                               width=20, 
                               height=2)
        install_btn.pack(side='left', padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∑–∂–µ"
        later_btn = tk.Button(button_frame, 
                             text="–ü–æ–∑–∂–µ",
                             command=lambda: [dialog.destroy(), root.destroy()],
                             bg='#666666', 
                             fg='white', 
                             font=('Arial', 12),
                             width=20, 
                             height=2)
        later_btn.pack(side='left', padx=10)
    else:
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        continue_btn = tk.Button(button_frame, 
                                text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                command=lambda: [dialog.destroy(), root.destroy()],
                                bg='#4CAF50', 
                                fg='white', 
                                font=('Arial', 12, 'bold'),
                                width=20, 
                                height=2)
        continue_btn.pack(pady=10)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    dialog.update_idletasks()
    x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
    y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
    dialog.geometry(f"+{x}+{y}")
    
    dialog.mainloop()


def main():
    print("DEBUG: main() started")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("DEBUG: Checking dependencies...")
    if not check_dependencies():
        print("‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)
    print("DEBUG: Dependencies OK")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    print("DEBUG: Checking project directory...")
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    print(f"DEBUG: script_dir={script_dir}")
    print(f"DEBUG: project_root={project_root}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    if not (project_root / "VERSION").exists() or not (project_root / "README.md").exists():
        print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Steam Deck Enhancement Pack")
        print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}")
        sys.exit(1)
    print("DEBUG: Project files OK")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã GUI –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–ª—Å—è
    # installation_status = check_installation()
    # if not installation_status.get('installed', False):
    #     print("‚ÑπÔ∏è –£—Ç–∏–ª–∏—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å Steam Deck")
    #     print("   –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°–∏—Å—Ç–µ–º–∞' ‚Üí '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É'")
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    print("DEBUG: Creating root window...")
    try:
        root = tk.Tk()
        print("DEBUG: Root window created")
        print("DEBUG: Creating GUI app...")
        app = SteamDeckGUI(root)
        print("DEBUG: GUI app created")
        print("DEBUG: Starting mainloop...")
        root.mainloop()
        print("DEBUG: Mainloop exited")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GUI: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
